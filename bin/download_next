#!/usr/bin/env php
<?php

// open syslog, include the process ID and also send
// the log to standard error, and use a user defined
// logging mechanism
openlog("CurvatureBuilder-Download", LOG_PID, LOG_USER);
$exit_code = 0;
try {

  include dirname(__FILE__)."/../config.php";

  if (empty($places)) {
    throw new Exception("\$places must be defined.");
  }

  $lock_file = dirname(__FILE__)."/../data/download.pid";
  if (file_exists($lock_file)) {
    $pid = trim(file_get_contents($lock_file));
    // If there is a pid file, then maybe a download is still running.
    // Check that it is still alive.
    $command = shell_exec('ps -p '.$pid.' -o comm=');
    if (empty($command)) {
      // The process has finished without clearing up its PID file.
      syslog(LOG_WARNING, "Lock-file exists, but PID $pid does not seem to be running. Removing $lock_file");
      unlink($lock_file);
    } else {
      syslog(LOG_NOTICE, "Lock-file exists and PID $pid is still running. Skipping this download.");
      closelog();
      exit(0);
    }
  }
  file_put_contents($lock_file, getmypid());

  $position_file = dirname(__FILE__)."/../data/last_downloaded";
  $last_index = FALSE;
  if (file_exists($position_file)) {
    $last_downloaded = trim(file_get_contents($position_file));
    $last_index = array_search($last_downloaded, $places);
  }
  if ($last_index !== FALSE) {
    $next_index = $last_index + 1;
  } else {
    $next_index = 0;
  }
  if (!$next_index || $next_index >= count($places)) {
    $next_index = 0;
  }

  $place = $places[$next_index];
  file_put_contents($position_file, $place);

  if (empty($pbf_dir)) {
    throw new Exception("\$pbf_dir must be defined.");
  }
  if (!file_exists($pbf_dir)) {
    mkdir($pbf_dir, 0775, true);
  }

  $url = "http://download.geofabrik.de/${place}-latest.osm.pbf";

  $place_dir = dirname($place);
  $place_file = basename($place);
  if (!file_exists($pbf_dir.'/'.$place_dir)) {
    mkdir($pbf_dir.'/'.$place_dir, 0775, true);
  }

  // Download the file
  if (file_exists($pbf_dir.'/'.$place.'-latest.osm.pbf')) {
    unlink($pbf_dir.'/'.$place.'-latest.osm.pbf');
  }
  if (empty($wget)) {
    $wget = 'wget';
  }
  exec($wget.' -P '.escapeshellarg($pbf_dir.'/'.$place_dir).' '.escapeshellarg($url). ' 2>&1', $output, $ret);
  if ($ret > 0) {
    fwrite(STDERR, "Failed downloading $url to $pbf_dir/$place_dir \n".implode("\n", $output));
    if (file_exists($pbf_dir.'/'.$place.'-latest.osm.pbf')) {
      unlink($pbf_dir.'/'.$place.'-latest.osm.pbf');
    }
    syslog(LOG_WARNING, "Failed downloading $url to $pbf_dir/$place_dir \n".implode("\n", $output));
    $exit_code = 1;
  } else {
    rename($pbf_dir.'/'.$place.'-latest.osm.pbf', $pbf_dir.'/'.$place.'.osm.pbf');
    syslog(LOG_NOTICE, "Downloaded $url to $pbf_dir/$place.osm.pbf");
  }
} catch (Exception $e) {
  syslog(LOG_ERROR, "Exception:".$e->getMessage());
  $exit_code = $e->getCode();
}

unlink($lock_file);
closelog();
exit($exit_code);
