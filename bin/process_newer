#!/usr/bin/env php
<?php

// open syslog, include the process ID and also send
// the log to standard error, and use a user defined
// logging mechanism
openlog("CurvatureBuilder-Process", LOG_PID, LOG_USER);

// From: http://stackoverflow.com/a/25879953/15872
function my_shell_exec($cmd, &$stdout=null, &$stderr=null, $cwd=null) {
    // fwrite(STDERR, $cmd."\n");
    $proc = proc_open($cmd,[
        1 => ['pipe','w'],
        2 => ['pipe','w'],
    ],$pipes, $cwd);
    $stdout = stream_get_contents($pipes[1]);
    fclose($pipes[1]);
    $stderr = stream_get_contents($pipes[2]);
    fclose($pipes[2]);
    return proc_close($proc);
}

function formatBytes($bytes, $precision = 2) {
    $units = array('B', 'KB', 'MB', 'GB', 'TB');
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);
    $bytes /= pow(1024, $pow);
    return round($bytes, $precision) . ' ' . $units[$pow];
}


try {

  include dirname(__FILE__)."/../config.php";

  $lock_file = dirname(__FILE__)."/../data/process.pid";
  if (file_exists($lock_file)) {
    $pid = trim(file_get_contents($lock_file));
    // If there is a pid file, then maybe a download is still running.
    // Check that it is still alive.
    $command = shell_exec('ps -p '.$pid.' -o comm=');
    if (empty($command)) {
      // The process has finished without clearing up its PID file.
      syslog(LOG_WARNING, "Lock-file exists, but PID $pid does not seem to be running. Removing $lock_file");
      unlink($lock_file);
    } else {
      syslog(LOG_NOTICE, "Lock-file exists and PID $pid is still running. Skipping this run.");
      closelog();
      exit(0);
    }
  }
  file_put_contents($lock_file, getmypid());
  $cwd = getcwd();

  if (empty($places)) {
    throw new Exception("\$places must be defined.");
  }
  if (empty($pbf_dir)) {
    throw new Exception("\$pbf_dir must be defined.");
  }
  if (!file_exists($pbf_dir)) {
    mkdir($pbf_dir, 0775, true);
  }
  if (empty($kml_dir)) {
    throw new Exception("\$kml_dir must be defined.");
  }
  if (!file_exists($kml_dir)) {
    mkdir($kml_dir, 0775, true);
  }
  $kml_dir = realpath($kml_dir);
  if (empty($temp_dir)) {
    $temp_dir = '/tmp';
  }
  if (empty($sort_limit) || !is_int($sort_limit)) {
    $sort_limit = 500 * 1024 * 1024;
  }

  if (empty($curvature_path)) {
    throw new Exception("\$curvature_path must be defined.");
  }
  if (!file_exists($curvature_path.'/curvature-collect')) {
    throw new Exception("curvature-collect doesn't exist at $curvature_path");
  }
  $exit_code = 0;
  foreach($places as $place) {
    $has_surfaces = false;
    $units = '--units km';
    foreach($miles_places as $miles_place) {
      if (preg_match('#^'.$miles_place.'#', $place)) {
        $units = '--units mi';
      }
    }
    $source_key = $place;
    $place = str_replace('-', '_', dirname($place)).'/'.basename($place);
    $pbf_file = $pbf_dir.'/'.$place.'.osm.pbf';
    if (file_exists($pbf_file)) {
      $pbf_tstamp = filemtime($pbf_file);
      $place_kml_dir = $kml_dir.'/'.dirname($place);
      $place_kml_basename = basename($place);
      $kml_tstamp = 0;
      if (file_exists($place_kml_dir)) {
        foreach (scandir($place_kml_dir) as $file) {
          if (preg_match('/^'.$place_kml_basename.'\.c_.+/', $file)) {
            $kml_tstamp = max($kml_tstamp, filemtime($place_kml_dir.'/'.$file));
          } else if (preg_match('/^'.$place_kml_basename.'\.surfaces\..+/', $file)) {
            $has_surfaces = true;
          }
        }
      }

      if ($pbf_tstamp > $kml_tstamp) {
        if (!file_exists($place_kml_dir)) {
          mkdir($place_kml_dir, 0775, true);
        }
        try {
          syslog(LOG_NOTICE, "Collecting ways for $place ...");

          $tmp_base = $temp_dir.'/'.basename($place);

          // Collect the highways out of the input file.
          $ret = my_shell_exec($curvature_path.'/curvature-collect --highway_types "motorway,trunk,primary,secondary,tertiary,unclassified,residential,service,motorway_link,trunk_link,primary_link,secondary_link,service" '.escapeshellarg($pbf_file).' > '.escapeshellarg($tmp_base.'-1.msgpack'), $stdout, $stderr);
          if ($ret > 0) {
            throw new Exception("Error collecting ways for $place: \n".$stderr);
          }
          $tmp_size = filesize($tmp_base.'-1.msgpack');
          syslog(LOG_NOTICE, "Ways collected for $place (".formatBytes($tmp_size)."), processing curvature...");

          // Filter and process our data for the main curvature KML outputs.
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-1.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_out_ways_with_tag --tag surface --values 'unpaved,dirt,gravel,fine_gravel,sand,grass,ground,pebblestone,mud,clay,dirt/sand,soil'"
            .' | '.$curvature_path."/curvature-pp filter_out_ways_with_tag --tag service --values 'driveway,parking_aisle,drive-through,parking,bus,emergency_access'"
            .' | '.$curvature_path."/curvature-pp filter_out_ways_with_tag --tag golf --values 'cartpath'"
            .' | '.$curvature_path."/curvature-pp filter_out_ways_with_tag --tag vehicle --values 'no'"
            .' | '.$curvature_path."/curvature-pp filter_out_ways_with_tag --tag motor_vehicle --values 'no'"
            .' | '.$curvature_path."/curvature-pp filter_out_ways --match 'And(TagEmpty(\"name\"), TagEmpty(\"ref\"), TagEquals(\"highway\", \"residential\"), TagEquals(\"tiger:reviewed\", \"no\"))'"
            .' | '.$curvature_path."/curvature-pp add_segments"
            .' | '.$curvature_path."/curvature-pp add_segment_length_and_radius"
            .' | '.$curvature_path."/curvature-pp add_segment_curvature"
            .' | '.$curvature_path."/curvature-pp filter_segment_deflections"
            .' | '.$curvature_path."/curvature-pp split_collections_on_straight_segments --length 2414"
            .' | '.$curvature_path."/curvature-pp roll_up_length"
            .' | '.$curvature_path."/curvature-pp roll_up_curvature"
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --min 300"
            .' | '.$curvature_path."/curvature-pp remove_way_properties --properties coords"
            .' > '.escapeshellarg($tmp_base.'-2.msgpack'), $stdout, $stderr);
          if ($ret > 0) {
            throw new Exception("Error processing curvature for $place: \n".$stderr);
          }
          $tmp_size = filesize($tmp_base.'-2.msgpack');
          // Halt if we don't have data.
          if ($tmp_size < 100) {
            throw new Exception("Error processing curvature - no data written to $tmp_base-2.msgpack . Size is
            ".formatBytes($tmp_size)."\nSTDERR:\n$stderr\nSTDOUT:\n$stdout");
          }
          syslog(LOG_NOTICE, "Processed curvature for $place (".formatBytes($tmp_size).").");

          # Split the output into two chunks, 300-1000 curvature and 1000+ curvature.
          syslog(LOG_NOTICE, "Dividing data set for $place...");
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-2.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --max 1000"
            .' > '.escapeshellarg($tmp_base.'-300-1000.msgpack'), $stdout, $stderr);
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-2.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --min 1000 --max 10000"
            .' > '.escapeshellarg($tmp_base.'-1000-10000.msgpack'), $stdout, $stderr);
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-2.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --min 10000"
            .' > '.escapeshellarg($tmp_base.'-10000-plus.msgpack'), $stdout, $stderr);

          # Sort each chunk if it is small enough and combine into -3.msgpack
          # 10000-plus first.
          $tmp_size = filesize($tmp_base.'-10000-plus.msgpack');
          if ($tmp_size <= $sort_limit) {
            syslog(LOG_NOTICE, "Sorting 10000-plus $place (".formatBytes($tmp_size).").");
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-10000-plus.msgpack')
              .' | '.$curvature_path."/curvature-pp sort_collections_by_sum --key curvature --direction DESC"
              .' > '.escapeshellarg($tmp_base.'-3.msgpack'), $stdout, $stderr);
            if ($ret > 0) {
              throw new Exception("Error sorting 10000-plus $place: \n".$stderr);
            }
            unlink($tmp_base.'-10000-plus.msgpack');
          } else {
            syslog(LOG_NOTICE, "Skipping sort for $place 10000+. ".formatBytes($tmp_size)." data size is larger than our limit of ".formatBytes($sort_limit).".");
            rename($tmp_base.'-10000-plus.msgpack', $tmp_base.'-3.msgpack');
          }
          # 1000-10000 next
          $tmp_size = filesize($tmp_base.'-1000-10000.msgpack');
          if ($tmp_size <= $sort_limit) {
            syslog(LOG_NOTICE, "Sorting 1000-10000 $place (".formatBytes($tmp_size).").");
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-1000-10000.msgpack')
              .' | '.$curvature_path."/curvature-pp sort_collections_by_sum --key curvature --direction DESC"
              .' >> '.escapeshellarg($tmp_base.'-3.msgpack'), $stdout, $stderr);
            unlink($tmp_base.'-1000-10000.msgpack');
            if ($ret > 0) {
              throw new Exception("Error sorting 1000-10000 $place: \n".$stderr);
            }
          } else {
            syslog(LOG_NOTICE, "Skipping sort for $place 1000-10000. ".formatBytes($tmp_size)." data size is larger than our limit of ".formatBytes($sort_limit).".");
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-1000-10000.msgpack')
              .' >> '.escapeshellarg($tmp_base.'-3.msgpack'), $stdout, $stderr);
            unlink($tmp_base.'-1000-10000.msgpack');
            if ($ret > 0) {
              throw new Exception("Error sorting 1000-10000 $place: \n".$stderr);
            }
          }
          # 300-1000 next
          $tmp_size = filesize($tmp_base.'-300-1000.msgpack');
          if ($tmp_size <= $sort_limit) {
            syslog(LOG_NOTICE, "Sorting 300-1000 $place (".formatBytes($tmp_size).").");
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-300-1000.msgpack')
              .' | '.$curvature_path."/curvature-pp sort_collections_by_sum --key curvature --direction DESC"
              .' >> '.escapeshellarg($tmp_base.'-3.msgpack'), $stdout, $stderr);
            unlink($tmp_base.'-300-1000.msgpack');
            if ($ret > 0) {
              throw new Exception("Error sorting 300-1000 $place: \n".$stderr);
            }
          } else {
            syslog(LOG_NOTICE, "Skipping sort for $place 300-1000. ".formatBytes($tmp_size)." data size is larger than our limit of ".formatBytes($sort_limit).".");
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-300-1000.msgpack')
              .' >> '.escapeshellarg($tmp_base.'-3.msgpack'), $stdout, $stderr);
            unlink($tmp_base.'-300-1000.msgpack');
            if ($ret > 0) {
              throw new Exception("Error sorting 300-1000 $place: \n".$stderr);
            }
          }
          $tmp_size = filesize($tmp_base.'-3.msgpack');
          syslog(LOG_NOTICE, "Sorting complete for $place (".formatBytes($tmp_size)."). Generating output...");
          // Halt if we don't have data.
          if ($tmp_size < 100) {
            throw new Exception("No data found for $place . Sorted data is ".formatBytes($tmp_size).". Not generating new outputs or syncing.");
          }

          # Add the legend.
          mkdir($temp_dir."/images");
          copy($curvature_path."/../output-master/legend.png", $temp_dir."/images/legend.png");

          // Output the c-1000 KML.
          mkdir($tmp_base);
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-3.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --min 1000"
            .' | '.$curvature_path."/curvature-output-kml --min_curvature 1000 --max_curvature 20000 $units"
            ." > ".escapeshellarg($temp_dir."/".basename($place)."/doc.kml"), $stdout, $stderr);
          if ($ret > 0) {
            throw new Exception("Error creating c-1000 KML for $place: \n".$stderr);
          }
          $kmz_file = $place_kml_dir."/".basename($place).".c_1000.kmz";
          if (file_exists($kmz_file)) {
            unlink($kmz_file);
          }
          $ret = my_shell_exec('zip -q '.escapeshellarg($kmz_file)." ".escapeshellarg(basename($place)."/doc.kml")." ".escapeshellarg("images/legend.png"), $stderr, $stdout, $temp_dir);
          if ($ret > 0) {
            throw new Exception("Error zipping KMZ for $place: $kml_file \n".$stderr);
          }
          unlink($tmp_base."/doc.kml");
          rmdir($tmp_base);

          // Output the c-300 KML.
          mkdir($tmp_base);
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-3.msgpack')
            .' | '.$curvature_path."/curvature-output-kml --min_curvature 300 --max_curvature 20000 $units"
            ." > ".escapeshellarg($temp_dir."/".basename($place)."/doc.kml"), $stdout, $stderr);
          if ($ret > 0) {
            throw new Exception("Error creating c-300 KML for $place: \n".$stderr);
          }
          $kmz_file = $place_kml_dir."/".basename($place).".c_300.kmz";
          if (file_exists($kmz_file)) {
            unlink($kmz_file);
          }
          $ret = my_shell_exec('zip -q '.escapeshellarg($kmz_file)." ".escapeshellarg(basename($place)."/doc.kml")." ".escapeshellarg("images/legend.png"), $stderr, $stdout, $temp_dir);
          if ($ret > 0) {
            throw new Exception("Error zipping KMZ for $place: $kml_file \n".$stderr);
          }
          unlink($tmp_base."/doc.kml");
          rmdir($tmp_base);

          # Remove the legend.
          unlink($temp_dir."/images/legend.png");
          rmdir($temp_dir."/images");

          // Output the c-1000 curves-colored KML.
          mkdir($tmp_base);
          $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-3.msgpack')
            .' | '.$curvature_path."/curvature-pp filter_collections_by_curvature --min 1000"
            .' | '.$curvature_path."/curvature-output-kml-curve-radius $units"
            ." > ".escapeshellarg($temp_dir."/".basename($place)."/doc.kml"), $stdout, $stderr);
          if ($ret > 0) {
            throw new Exception("Error creating c-1000 curves KML for $place: \n".$stderr);
          }
          $kmz_file = $place_kml_dir."/".basename($place).".c_1000.curves.kmz";
          if (file_exists($kmz_file)) {
            unlink($kmz_file);
          }
          $ret = my_shell_exec('zip -q '.escapeshellarg($kmz_file)." ".escapeshellarg(basename($place)."/doc.kml"), $stderr, $stdout, $temp_dir);
          if ($ret > 0) {
            throw new Exception("Error zipping KMZ for $place: $kml_file \n".$stderr);
          }
          unlink($tmp_base."/doc.kml");
          rmdir($tmp_base);

          if ($has_surfaces) {
            // Output the surfaces KML.
            mkdir($tmp_base);
            $ret = my_shell_exec('cat '.escapeshellarg($tmp_base.'-1.msgpack')
              .' | '.$curvature_path."/curvature-pp add_segments"
              .' | '.$curvature_path."/curvature-pp add_segment_length_and_radius"
              .' | '.$curvature_path."/curvature-output-kml-surfaces $units"
              ." > ".escapeshellarg($temp_dir."/".basename($place)."/doc.kml"), $stdout, $stderr);
            if ($ret > 0) {
              throw new Exception("Error creating surfaces KML for $place: \n".$stderr);
            }
            $kmz_file = $place_kml_dir."/".basename($place).".surfaces.kmz";
            if (file_exists($kmz_file)) {
              unlink($kmz_file);
            }
            $ret = my_shell_exec('zip -q '.escapeshellarg($kmz_file)." ".escapeshellarg(basename($place)."/doc.kml"), $stderr, $stdout, $temp_dir);
            if ($ret > 0) {
              throw new Exception("Error zipping KMZ for $place: $kml_file \n".$stderr);
            }
            unlink($tmp_base."/doc.kml");
            rmdir($tmp_base);
          }

          // Output to postgis if configured.
          if (!empty($postgis_database)) {
            // Halt if we don't have data.
            if (filesize($tmp_base.'-3.msgpack') < 100) {
              throw new Exception("No data found for $place . Sorted data is ".formatBytes($tmp_size).". Not syncing to postgis.");
            }
            $command = 'cat '.escapeshellarg($tmp_base.'-3.msgpack')
              .' | '.$curvature_path."/curvature-output-postgis -s"
              ." --source ".escapeshellarg($source_key)
              ." --database ".escapeshellarg($postgis_database);
            if (!empty($postgis_host)) {
              $command .= " --host ".escapeshellarg($postgis_host);
            }
            if (!empty($postgis_port)) {
              $command .= " --port ".escapeshellarg($postgis_port);
            }
            if (!empty($postgis_user)) {
              $command .= " --user ".escapeshellarg($postgis_user);
            }
            $command_copy = $command;
            if (!empty($postgis_password)) {
              $command .= " --password ".escapeshellarg($postgis_password);
              $command_copy .= " --password <hidden>";
            }

            syslog(LOG_NOTICE, "Sending to PostGIS for $place ...");
            $ret = my_shell_exec($command, $stderr, $stdout, $temp_dir);
            if ($ret > 0) {
              throw new Exception("Error sending $place to PostGIS: \n$command_copy \n".$stderr."\n".$stdout);
            }
            syslog(LOG_NOTICE, "Sending to PostGIS complete for $place: ".$stderr."\n".$stdout);
          }

          if (file_exists($tmp_base.'-1.msgpack')) {
            unlink($tmp_base.'-1.msgpack');
          }
          if (file_exists($tmp_base.'-2.msgpack')) {
            unlink($tmp_base.'-2.msgpack');
          }
          if (file_exists($tmp_base.'-10000-plus.msgpack')) {
            unlink($tmp_base.'-10000-plus.msgpack');
          }
          if (file_exists($tmp_base.'-1000-10000.msgpack')) {
            unlink($tmp_base.'-1000-10000.msgpack');
          }
          if (file_exists($tmp_base.'-300-1000.msgpack')) {
            unlink($tmp_base.'-300-1000.msgpack');
          }
          if (file_exists($tmp_base.'-3.msgpack')) {
            unlink($tmp_base.'-3.msgpack');
          }
          syslog(LOG_NOTICE, "KML output for $place complete.");

        } catch (Exception $e) {
          if (file_exists($tmp_base.'-1.msgpack')) {
            unlink($tmp_base.'-1.msgpack');
          }
          if (file_exists($tmp_base.'-2.msgpack')) {
            unlink($tmp_base.'-2.msgpack');
          }
          if (file_exists($tmp_base.'-10000-plus.msgpack')) {
            unlink($tmp_base.'-10000-plus.msgpack');
          }
          if (file_exists($tmp_base.'-1000-10000.msgpack')) {
            unlink($tmp_base.'-1000-10000.msgpack');
          }
          if (file_exists($tmp_base.'-300-1000.msgpack')) {
            unlink($tmp_base.'-300-1000.msgpack');
          }
          if (file_exists($tmp_base.'-3.msgpack')) {
            unlink($tmp_base.'-3.msgpack');
          }
          if (file_exists($tmp_base.'/doc.kml')) {
            unlink($tmp_base.'/doc.kml');
          }
          rmdir($tmp_base);

          syslog(LOG_WARNING, $e->getMessage());
          fwrite(STDERR, $e->getMessage()."\n");
          $exit_code = $e->getCode();
        }
      }
    }
  }

  if (empty($curvature_site_tools_path)) {
    throw new Exception("\$curvature_site_tools_path must be defined.");
  }
  if (!file_exists($curvature_site_tools_path.'/create_indices')) {
    throw new Exception("create_indices doesn't exist at $curvature_site_tools_path");
  }
  exec($curvature_site_tools_path.'/create_indices', $output, $ret);
  if ($ret > 0) {
    syslog(LOG_WARNING, "Error creating indices:\n".implode("\n", $output));
    print implode("\n", $output)."\n\n";
    $exit_code = 3;
  } else {
    syslog(LOG_NOTICE, "Created indices");
  }

  if (!empty($rsync_target)) {
    if (empty($rsync)) {
      $rsync = 'rsync';
    }
    exec($rsync.' -a --delete --exclude=".*" '.$rsync_options.' '.$kml_dir.'/ '.$rsync_target, $output, $ret);
    if ($ret > 0) {
      syslog(LOG_WARNING, "Error rsyncing files:\n".implode("\n", $output));
      print implode("\n", $output)."\n\n";
      $exit_code = 4;
    } else {
      syslog(LOG_NOTICE, "Rsync curvature files");
    }
  }
} catch (Exception $e) {
  syslog(LOG_ERR, "Exception:".$e->getMessage());
  $exit_code = $e->getCode();
}

unlink($lock_file);
closelog();
exit($exit_code);
